// App.js
import React, {
  useState,
  useEffect,
  useRef,
  createContext,
  useContext,
  useCallback,
} from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  TextInput,
  FlatList,
  StyleSheet,
  Animated,
  Dimensions,
  Easing,
  Alert,
  Modal,
  Share,
} from 'react-native';

// Navigation
import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';

// UI + Icons
import { Provider as PaperProvider, Button, ActivityIndicator } from 'react-native-paper';
import Ionicons from 'react-native-vector-icons/Ionicons';

// For saving images
import * as FileSystem from 'expo-file-system';
import * as MediaLibrary from 'expo-media-library';

// For swipe gestures in Details
import GestureRecognizer from 'react-native-swipe-gestures';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();
const { width } = Dimensions.get('window');

// ----------------------
// THEMES & THEME CONTEXT
// ----------------------
const MyLightTheme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    background: '#FFFFFF',
    text: '#333333',
    primary: '#B61919',
    card: '#F5F5F5',
  },
};

const MyDarkTheme = {
  ...DarkTheme,
  colors: {
    ...DarkTheme.colors,
    background: '#121212',
    text: '#ffffff',
    primary: '#EF233C',
    card: '#1E1E1E',
  },
};

const ThemeContext = createContext({
  isDark: true,
  toggleTheme: () => {},
});
function useAppTheme() {
  return useContext(ThemeContext);
}

// ----------------------
// AUTH CONTEXT
// ----------------------
const AuthContext = createContext(null);
function useAuth() {
  return useContext(AuthContext);
}

// ----------------------
// FAVORITES CONTEXT
// ----------------------
const FavoritesContext = createContext(null);
function useFavorites() {
  return useContext(FavoritesContext);
}

// ----------------------
// SPLASH SCREEN
// ----------------------
function SplashScreen({ navigation }) {
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // Fade in
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start(() => {
      // Wait 1.5s, then navigate to Login
      setTimeout(() => {
        navigation.replace('Login');
      }, 1500);
    });
  }, [fadeAnim, navigation]);

  return (
    <Animated.View style={[styles.splashContainer, { opacity: fadeAnim }]}>
      <Ionicons name="rocket-outline" size={100} color="#EF233C" />
      <Text style={styles.splashText}>Welcome to Waifu Walls!</Text>
    </Animated.View>
  );
}

// ----------------------
// LOGIN SCREEN
// ----------------------
function LoginScreen({ navigation }) {
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const scaleAnim = useRef(new Animated.Value(0)).current;
  const { setIsLoggedIn } = useAuth();
  const { isDark } = useAppTheme();

  useEffect(() => {
    Animated.spring(scaleAnim, {
      toValue: 1,
      friction: 2,
      useNativeDriver: true,
    }).start();
  }, []);

  const onLogin = () => {
    if (email.trim() && username.trim() && password.trim()) {
      setIsLoggedIn(true);
      navigation.replace('MainTabs');
    } else {
      Alert.alert('Login Error', 'Please fill all fields properly.');
    }
  };

  return (
    <View style={[styles.loginContainer, { backgroundColor: isDark ? '#121212' : '#fff' }]}>
      <Animated.View style={{ transform: [{ scale: scaleAnim }], marginBottom: 30 }}>
        <Ionicons
          name="flower"
          size={100}
          color={isDark ? MyDarkTheme.colors.primary : MyLightTheme.colors.primary}
        />
      </Animated.View>

      <Text style={[styles.loginTitle, { color: isDark ? '#EF233C' : '#B61919' }]}>
        Waifu Walls
      </Text>

      <TextInput
        placeholder="Email"
        placeholderTextColor="#aaa"
        style={[
          styles.loginInput,
          { backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5', color: isDark ? '#fff' : '#000' },
        ]}
        value={email}
        onChangeText={setEmail}
      />
      <TextInput
        placeholder="Username"
        placeholderTextColor="#aaa"
        style={[
          styles.loginInput,
          { backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5', color: isDark ? '#fff' : '#000' },
        ]}
        value={username}
        onChangeText={setUsername}
      />
      <TextInput
        placeholder="Password"
        placeholderTextColor="#aaa"
        secureTextEntry
        style={[
          styles.loginInput,
          { backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5', color: isDark ? '#fff' : '#000' },
        ]}
        value={password}
        onChangeText={setPassword}
      />

      <Button
        mode="contained"
        onPress={onLogin}
        style={[styles.loginButton, { backgroundColor: isDark ? '#EF233C' : '#B61919' }]}
      >
        Login
      </Button>
    </View>
  );
}

// ----------------------
// RANDOMIZE UTILITY
// ----------------------
function randomizeItem(item) {
  // Random heights for a masonry look
  const randomHeight = 200 + Math.floor(Math.random() * 150); // 200-350
  // 20% chance Premium, 15% chance Coins
  const isPremium = Math.random() < 0.2;
  const isCoins = Math.random() < 0.15;
  return { ...item, randomHeight, isPremium, isCoins };
}

// ----------------------
// HOME SCREEN
// Infinite scrolling, random premium/coins
// ----------------------
function HomeScreen({ navigation }) {
  const [wallpapers, setWallpapers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);

  const fetchWallpapers = async () => {
    try {
      setLoading(true);
      const url = `https://api.waifu.im/search/?included_tags=waifu&many=true&amount=10&exclude_tags=nsfw&ts=${Date.now()}`;
      const res = await fetch(url);
      const data = await res.json();
      if (data.images) {
        const newItems = data.images.map((img) => randomizeItem(img));
        setWallpapers((prev) => [...prev, ...newItems]);
      }
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchWallpapers();
  }, [page]);

  const onEndReached = () => {
    if (!loading) {
      setPage((p) => p + 1);
    }
  };

  const renderItem = ({ item, index }) => (
    <TouchableOpacity
      style={[styles.wallpaperCard, { height: item.randomHeight }]}
      onPress={() =>
        navigation.navigate('Details', {
          wallpapers,
          index,
        })
      }
    >
      <Image source={{ uri: item.url }} style={[styles.wallpaperImage, { height: item.randomHeight }]} />
      <TouchableOpacity style={styles.transparentDownloadIcon}>
        <Ionicons name="download-outline" size={24} color="#fff" />
      </TouchableOpacity>

      {item.isPremium && (
        <View style={styles.premiumBadge}>
          <Ionicons name="diamond" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Premium</Text>
        </View>
      )}
      {item.isCoins && (
        <View style={styles.coinsBadge}>
          <Ionicons name="logo-bitcoin" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Coins</Text>
        </View>
      )}
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <FlatList
        data={wallpapers}
        keyExtractor={(item, idx) => item.image_id + '-' + idx}
        renderItem={renderItem}
        numColumns={2}
        contentContainerStyle={{ paddingBottom: 80 }}
        onEndReachedThreshold={0.5}
        onEndReached={onEndReached}
        ListFooterComponent={
          loading ? (
            <View style={{ padding: 10 }}>
              <ActivityIndicator color="#EF233C" />
            </View>
          ) : null
        }
      />
    </View>
  );
}

// ----------------------
// SEARCH SCREEN
// Fetch more images (amount=20)
// ----------------------
function SearchScreen({ navigation }) {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const { isDark } = useAppTheme();

  const handleSearch = async () => {
    if (!query.trim()) return;
    setLoading(true);
    try {
      const res = await fetch(
        `https://api.waifu.im/search/?included_tags=${query}&many=true&amount=20`
      );
      const data = await res.json();
      if (data.images) {
        const newItems = data.images.map((img) => randomizeItem(img));
        setResults(newItems);
      }
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const onPressItem = (index) => {
    navigation.navigate('Details', {
      wallpapers: results,
      index,
    });
  };

  const renderItem = ({ item, index }) => (
    <TouchableOpacity
      style={[styles.wallpaperCard, { height: item.randomHeight }]}
      onPress={() => onPressItem(index)}
    >
      <Image
        source={{ uri: item.url }}
        style={[styles.wallpaperImage, { height: item.randomHeight }]}
      />
      {item.isPremium && (
        <View style={styles.premiumBadge}>
          <Ionicons name="diamond" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Premium</Text>
        </View>
      )}
      {item.isCoins && (
        <View style={styles.coinsBadge}>
          <Ionicons name="logo-bitcoin" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Coins</Text>
        </View>
      )}
    </TouchableOpacity>
  );

  return (
    <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#ffffff' }]}>
      <View style={styles.searchRow}>
        <TextInput
          style={[
            styles.searchInput,
            {
              backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5',
              color: isDark ? '#fff' : '#000',
            },
          ]}
          placeholder="Search waifus..."
          placeholderTextColor="#aaa"
          value={query}
          onChangeText={setQuery}
        />
        <Button
          mode="contained"
          onPress={handleSearch}
          style={[styles.searchBtn, { backgroundColor: isDark ? '#EF233C' : '#B61919' }]}
        >
          Go
        </Button>
      </View>
      {loading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator color={isDark ? '#EF233C' : '#B61919'} />
        </View>
      )}

      <FlatList
        data={results}
        keyExtractor={(item, idx) => item.image_id + '-' + idx}
        renderItem={renderItem}
        numColumns={2}
        contentContainerStyle={{ paddingBottom: 80 }}
      />
    </View>
  );
}

// ----------------------
// AVATAR CREATION
// Real shapes (hair, eyes, mouth, face color) + bounce animation
// ----------------------
function AvatarCreationScreen({ navigation }) {
  // Indices for hair, eyes, mouth, face color
  const [hairIndex, setHairIndex] = useState(0);
  const [eyesIndex, setEyesIndex] = useState(0);
  const [mouthIndex, setMouthIndex] = useState(0);
  const [faceColorIndex, setFaceColorIndex] = useState(0);

  // Hair shapes (just a few example styles)
  const hairStyles = [
    { backgroundColor: '#000', borderBottomLeftRadius: 30, borderBottomRightRadius: 30, height: 30 },
    { backgroundColor: '#8B4513', borderBottomLeftRadius: 50, borderBottomRightRadius: 50, height: 40 },
    { backgroundColor: '#FF69B4', borderBottomLeftRadius: 20, borderBottomRightRadius: 20, height: 35 },
  ];

  // Eyes shapes
  const eyesStyles = [
    { width: 10, height: 10, borderRadius: 5, backgroundColor: '#000' },
    { width: 8, height: 8, borderRadius: 4, backgroundColor: '#00F' },
    { width: 10, height: 6, borderRadius: 3, backgroundColor: '#fff' },
  ];

  // Mouth shapes
  const mouthStyles = [
    { width: 30, height: 5, borderRadius: 2, backgroundColor: '#000' },
    { width: 20, height: 2, borderRadius: 1, backgroundColor: '#F00' },
    { width: 25, height: 5, borderRadius: 10, backgroundColor: '#000' },
  ];

  // Face colors
  const faceColors = ['#F2D3B3', '#FFDAB9', '#F5E4C3', '#E8C0A7'];

  // Bounce animation
  const bounceAnim = useRef(new Animated.Value(1)).current;
  const doBounce = () => {
    Animated.sequence([
      Animated.timing(bounceAnim, {
        toValue: 1.1,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(bounceAnim, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true,
      }),
    ]).start();
  };

  // Re-bounce on changes
  useEffect(() => {
    doBounce();
  }, [hairIndex, eyesIndex, mouthIndex, faceColorIndex]);

  const onDone = () => {
    Alert.alert('Avatar Created', 'Your custom avatar has been created!');
    navigation.goBack();
  };

  // Current chosen styles
  const currentHair = hairStyles[hairIndex];
  const currentEyes = eyesStyles[eyesIndex];
  const currentMouth = mouthStyles[mouthIndex];
  const currentFaceColor = faceColors[faceColorIndex];

  return (
    <View style={styles.avatarContainer}>
      <Animated.View
        style={[
          styles.avatarWrapper,
          { transform: [{ scale: bounceAnim }] },
        ]}
      >
        {/* FACE */}
        <View style={[styles.faceBase, { backgroundColor: currentFaceColor }]}>
          {/* HAIR (absolute top) */}
          <View style={[styles.hairBase, currentHair]} />
          {/* EYES */}
          <View style={styles.eyesRow}>
            <View style={[styles.eye, currentEyes]} />
            <View style={[styles.eye, currentEyes]} />
          </View>
          {/* MOUTH */}
          <View style={[styles.mouthBase, currentMouth]} />
        </View>
      </Animated.View>

      {/* Controls */}
      <View style={styles.avatarControls}>
        <Button onPress={() => setHairIndex((i) => (i + 1) % hairStyles.length)}>Hair</Button>
        <Button onPress={() => setEyesIndex((i) => (i + 1) % eyesStyles.length)}>Eyes</Button>
        <Button onPress={() => setMouthIndex((i) => (i + 1) % mouthStyles.length)}>Mouth</Button>
        <Button onPress={() => setFaceColorIndex((i) => (i + 1) % faceColors.length)}>Color</Button>
      </View>

      <Button mode="contained" onPress={onDone} style={{ marginTop: 20 }}>
        Done
      </Button>
    </View>
  );
}

// ----------------------
// FAVORITES SCREEN
// ----------------------
function FavoritesScreen({ navigation }) {
  const { favorites } = useFavorites();
  const { isDark } = useAppTheme();

  if (favorites.length === 0) {
    return (
      <View
        style={[
          styles.container,
          { justifyContent: 'center', alignItems: 'center', backgroundColor: isDark ? '#121212' : '#fff' },
        ]}
      >
        <Text style={[styles.sectionTitle, { color: isDark ? '#EF233C' : '#B61919' }]}>
          No Favorites Yet
        </Text>
      </View>
    );
  }

  const renderItem = ({ item, index }) => (
    <TouchableOpacity
      style={[styles.wallpaperCard, { height: item.randomHeight || 300 }]}
      onPress={() =>
        navigation.navigate('Details', {
          wallpapers: favorites,
          index,
        })
      }
    >
      <Image
        source={{ uri: item.url }}
        style={[styles.wallpaperImage, { height: item.randomHeight || 300 }]}
      />
      {item.isPremium && (
        <View style={styles.premiumBadge}>
          <Ionicons name="diamond" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Premium</Text>
        </View>
      )}
      {item.isCoins && (
        <View style={styles.coinsBadge}>
          <Ionicons name="logo-bitcoin" size={16} color="#fff" />
          <Text style={{ color: '#fff', marginLeft: 5 }}>Coins</Text>
        </View>
      )}
    </TouchableOpacity>
  );

  return (
    <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#fff' }]}>
      <FlatList
        data={favorites}
        keyExtractor={(item, idx) => item.image_id + '-' + idx}
        renderItem={renderItem}
        numColumns={2}
        contentContainerStyle={{ paddingBottom: 80 }}
      />
    </View>
  );
}

// ----------------------
// PROFILE SCREEN
// - Toggle theme, logout
// - Avatar creation link
// - Invite friends with real share link
// - Donation flow
// ----------------------
function ProfileScreen({ navigation }) {
  const { isLoggedIn, setIsLoggedIn } = useAuth();
  const { isDark, toggleTheme } = useAppTheme();

  // Donation popup
  const [showDonation, setShowDonation] = useState(false);
  // Payment form
  const [showPaymentForm, setShowPaymentForm] = useState(false);
  const [cardNumber, setCardNumber] = useState('');
  const [expiry, setExpiry] = useState('');
  const [cvv, setCvv] = useState('');

  const handleInvite = async () => {
    try {
      await Share.share({
        message: 'Check out this amazing Waifu Walls app: https://mywaifuwallsapp.com',
      });
    } catch (error) {
      console.error(error);
    }
  };

  const handleSupport = () => {
    setShowDonation(false);
    setShowPaymentForm(true);
  };

  const handlePayment = () => {
    // Mock payment
    Alert.alert('Thank you!', 'Your payment of 500 FCFA has been sent to 676921748.');
    setShowPaymentForm(false);
  };

  return (
    <View style={[styles.container, { backgroundColor: isDark ? '#121212' : '#fff' }]}>
      <Text style={[styles.sectionTitle, { color: isDark ? '#EF233C' : '#B61919' }]}>Profile</Text>
      <Text style={{ color: isDark ? '#fff' : '#000', marginTop: 10 }}>
        Logged In: {isLoggedIn ? 'Yes' : 'No'}
      </Text>

      <Button
        mode="contained"
        onPress={() => navigation.navigate('AvatarCreation')}
        style={{ marginTop: 20, backgroundColor: isDark ? '#EF233C' : '#B61919' }}
      >
        Create Avatar
      </Button>

      <Button
        mode="contained"
        onPress={handleInvite}
        style={{ marginTop: 20, backgroundColor: isDark ? '#EF233C' : '#B61919' }}
      >
        Invite Friends
      </Button>

      <Button
        mode="contained"
        onPress={toggleTheme}
        style={{ marginTop: 20, backgroundColor: isDark ? '#EF233C' : '#B61919' }}
      >
        Toggle Theme
      </Button>

      <Button
        mode="contained"
        onPress={() => setIsLoggedIn(false)}
        style={{ marginTop: 20, backgroundColor: isDark ? '#EF233C' : '#B61919' }}
      >
        Logout
      </Button>

      {/* Coin icon -> Donation popup */}
      <TouchableOpacity
        style={[styles.coinIconContainer, { backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5' }]}
        onPress={() => setShowDonation(true)}
      >
        <Ionicons name="logo-bitcoin" size={30} color="#FFD700" />
      </TouchableOpacity>

      {/* Donation Popup */}
      <Modal visible={showDonation} transparent animationType="slide">
        <View style={styles.popupContainer}>
          <View style={styles.popupContent}>
            <Text style={{ fontSize: 18, marginBottom: 10, color: '#fff' }}>
              Support the app with 500 FCFA?
            </Text>
            <Button mode="contained" onPress={handleSupport} style={{ backgroundColor: '#EF233C' }}>
              Support
            </Button>
            <Button
              mode="text"
              onPress={() => setShowDonation(false)}
              labelStyle={{ color: '#fff' }}
              style={{ marginTop: 10 }}
            >
              Cancel
            </Button>
          </View>
        </View>
      </Modal>

      {/* Payment Form Modal */}
      <Modal visible={showPaymentForm} transparent animationType="slide">
        <View style={styles.popupContainer}>
          <View style={styles.paymentContent}>
            <Text style={{ fontSize: 18, marginBottom: 10, color: '#000' }}>Enter Card Info</Text>
            <TextInput
              placeholder="Card Number"
              style={styles.paymentInput}
              value={cardNumber}
              onChangeText={setCardNumber}
            />
            <TextInput
              placeholder="Expiry (MM/YY)"
              style={styles.paymentInput}
              value={expiry}
              onChangeText={setExpiry}
            />
            <TextInput
              placeholder="CVV"
              style={styles.paymentInput}
              secureTextEntry
              value={cvv}
              onChangeText={setCvv}
            />
            <Button mode="contained" onPress={handlePayment} style={{ backgroundColor: '#EF233C' }}>
              Send Payment
            </Button>
            <Button
              mode="text"
              onPress={() => setShowPaymentForm(false)}
              labelStyle={{ color: '#000' }}
              style={{ marginTop: 10 }}
            >
              Cancel
            </Button>
          </View>
        </View>
      </Modal>
    </View>
  );
}

// ----------------------
// DETAILS SCREEN
// Swipe left/right for next/prev, swipe down to close
// ----------------------
function DetailsScreen({ route, navigation }) {
  const { wallpapers, index } = route.params;
  const [currentIndex, setCurrentIndex] = useState(index);
  const { favorites, setFavorites } = useFavorites();
  const { isDark } = useAppTheme();

  const wallpaper = wallpapers[currentIndex];
  const isFavorite = favorites.some((f) => f.image_id === wallpaper.image_id);

  const toggleFavorite = () => {
    if (!wallpaper) return;
    if (isFavorite) {
      setFavorites(favorites.filter((f) => f.image_id !== wallpaper.image_id));
    } else {
      setFavorites([...favorites, wallpaper]);
    }
  };

  const downloadImage = async () => {
    if (!wallpaper) return;
    try {
      const { status } = await MediaLibrary.requestPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Required', 'Allow access to media library to download images.');
        return;
      }
      const filename = wallpaper.image_id + '.jpg';
      const fileUri = FileSystem.cacheDirectory + filename;
      await FileSystem.downloadAsync(wallpaper.url, fileUri);
      // Save to gallery
      const asset = await MediaLibrary.createAssetAsync(fileUri);
      await MediaLibrary.createAlbumAsync('WaifuWalls', asset, false);
      Alert.alert('Downloaded!', 'Image saved to WaifuWalls album in your gallery.');
    } catch (err) {
      console.error(err);
      Alert.alert('Download failed.', err.message);
    }
  };

  // Swipe handlers
  const handleSwipeLeft = () => {
    if (currentIndex < wallpapers.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };
  const handleSwipeRight = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };
  const handleSwipeDown = () => {
    navigation.goBack();
  };

  if (!wallpaper) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator color="#EF233C" />
      </View>
    );
  }

  return (
    <GestureRecognizer
      onSwipeLeft={handleSwipeLeft}
      onSwipeRight={handleSwipeRight}
      onSwipeDown={handleSwipeDown}
      style={[styles.detailsContainer, { backgroundColor: isDark ? '#121212' : '#fff' }]}
    >
      <Image source={{ uri: wallpaper.url }} style={styles.detailsImage} />
      <TouchableOpacity style={[styles.transparentTopIcon, { left: 20 }]} onPress={toggleFavorite}>
        <Ionicons
          name={isFavorite ? 'bookmark' : 'bookmark-outline'}
          size={30}
          color="#fff"
        />
      </TouchableOpacity>
      <TouchableOpacity style={[styles.transparentTopIcon, { right: 20 }]} onPress={downloadImage}>
        <Ionicons name="download-outline" size={30} color="#fff" />
      </TouchableOpacity>
    </GestureRecognizer>
  );
}

// ----------------------
// CUSTOM BUBBLE TAB BAR
// ----------------------
function CustomBubbleTabBar({ state, descriptors, navigation }) {
  const { isDark } = useAppTheme();
  const translateY = useRef(new Animated.Value(100)).current;

  useEffect(() => {
    Animated.timing(translateY, {
      toValue: 0,
      duration: 400,
      easing: Easing.out(Easing.ease),
      useNativeDriver: true,
    }).start();
  }, []);

  return (
    <Animated.View
      style={[
        styles.bubbleTabBar,
        {
          backgroundColor: isDark ? '#1E1E1E' : '#F5F5F5',
          transform: [{ translateY }],
        },
      ]}
    >
      {state.routes.map((route, index) => {
        const { options } = descriptors[route.key];
        const isFocused = state.index === index;

        let iconName = 'ellipse';
        switch (route.name) {
          case 'Home':
            iconName = 'planet';
            break;
          case 'Search':
            iconName = 'search';
            break;
          case 'Favorites':
            iconName = 'heart';
            break;
          case 'Profile':
            iconName = 'person';
            break;
        }

        const onPress = () => {
          const event = navigation.emit({
            type: 'tabPress',
            target: route.key,
          });
          if (!event.defaultPrevented) {
            navigation.navigate(route.name);
          }
        };

        return (
          <TouchableOpacity
            key={route.key}
            onPress={onPress}
            style={styles.bubbleTabButton}
            activeOpacity={0.7}
          >
            <Ionicons
              name={iconName}
              size={isFocused ? 28 : 24}
              color={
                isFocused
                  ? isDark
                    ? MyDarkTheme.colors.primary
                    : MyLightTheme.colors.primary
                  : '#888'
              }
            />
            <Text
              style={[
                styles.bubbleTabLabel,
                { color: isFocused ? (isDark ? '#EF233C' : '#B61919') : '#888' },
              ]}
            >
              {route.name}
            </Text>
          </TouchableOpacity>
        );
      })}
    </Animated.View>
  );
}

// ----------------------
// MAIN TABS
// ----------------------
function MainTabs() {
  return (
    <Tab.Navigator
      screenOptions={{ headerShown: false }}
      tabBar={(props) => <CustomBubbleTabBar {...props} />}
    >
      <Tab.Screen name="Home" component={HomeScreen} />
      <Tab.Screen name="Search" component={SearchScreen} />
      <Tab.Screen name="Favorites" component={FavoritesScreen} />
      <Tab.Screen name="Profile" component={ProfileScreen} />
    </Tab.Navigator>
  );
}

// ----------------------
// APP (ROOT)
// ----------------------
export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [favorites, setFavorites] = useState([]);
  const [isDark, setIsDark] = useState(true);

  const toggleTheme = useCallback(() => {
    setIsDark((prev) => !prev);
  }, []);

  const themeValue = { isDark, toggleTheme };
  const authValue = { isLoggedIn, setIsLoggedIn };
  const favValue = { favorites, setFavorites };

  return (
    <ThemeContext.Provider value={themeValue}>
      <AuthContext.Provider value={authValue}>
        <FavoritesContext.Provider value={favValue}>
          <PaperProvider>
            <NavigationContainer theme={isDark ? MyDarkTheme : MyLightTheme}>
              <Stack.Navigator screenOptions={{ headerShown: false }}>
                <Stack.Screen name="Splash" component={SplashScreen} />
                <Stack.Screen name="Login" component={LoginScreen} />
                <Stack.Screen name="MainTabs" component={MainTabs} />
                <Stack.Screen name="Details" component={DetailsScreen} />
                <Stack.Screen name="AvatarCreation" component={AvatarCreationScreen} />
              </Stack.Navigator>
            </NavigationContainer>
          </PaperProvider>
        </FavoritesContext.Provider>
      </AuthContext.Provider>
    </ThemeContext.Provider>
  );
}

// ----------------------
// STYLES
// ----------------------
const styles = StyleSheet.create({
  // SPLASH
  splashContainer: {
    flex: 1,
    backgroundColor: '#121212',
    justifyContent: 'center',
    alignItems: 'center',
  },
  splashText: {
    marginTop: 20,
    fontSize: 24,
    color: '#EF233C',
    fontWeight: 'bold',
  },

  container: {
    flex: 1,
    padding: 10,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },

  // Login
  loginContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loginTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  loginInput: {
    width: '80%',
    borderWidth: 1,
    borderColor: '#333',
    borderRadius: 8,
    padding: 10,
    marginBottom: 15,
  },
  loginButton: {
    width: '60%',
    padding: 5,
  },

  // Home / wallpapers
  wallpaperCard: {
    flex: 1,
    margin: 5,
    borderRadius: 10,
    overflow: 'hidden',
    backgroundColor: '#1E1E1E',
    position: 'relative',
  },
  wallpaperImage: {
    width: '100%',
    resizeMode: 'cover',
  },
  transparentDownloadIcon: {
    position: 'absolute',
    bottom: 5,
    right: 5,
    backgroundColor: 'rgba(0,0,0,0.4)',
    padding: 6,
    borderRadius: 20,
  },
  premiumBadge: {
    position: 'absolute',
    top: 5,
    left: 5,
    backgroundColor: 'rgba(239,35,60,0.7)',
    flexDirection: 'row',
    alignItems: 'center',
    padding: 5,
    borderRadius: 20,
  },
  coinsBadge: {
    position: 'absolute',
    top: 5,
    right: 5,
    backgroundColor: 'rgba(255, 189, 46, 0.8)',
    flexDirection: 'row',
    alignItems: 'center',
    padding: 5,
    borderRadius: 20,
  },

  // Search
  searchRow: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  searchInput: {
    flex: 1,
    borderRadius: 8,
    marginRight: 10,
    paddingHorizontal: 10,
  },
  searchBtn: {
    justifyContent: 'center',
  },

  // Avatar creation
  avatarContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarWrapper: {
    width: 150,
    height: 150,
  },
  faceBase: {
    flex: 1,
    borderRadius: 75,
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  hairBase: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
  },
  eyesRow: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  eye: {
    marginHorizontal: 10,
  },
  mouthBase: {
    marginTop: 5,
  },
  avatarControls: {
    flexDirection: 'row',
    marginTop: 20,
    justifyContent: 'space-around',
    width: '80%',
  },

  // Favorites / Profile
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },

  // Details
  detailsContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  detailsImage: {
    width: width,
    height: width * 1.4,
    resizeMode: 'cover',
  },
  transparentTopIcon: {
    position: 'absolute',
    top: 40,
    backgroundColor: 'rgba(0,0,0,0.4)',
    padding: 8,
    borderRadius: 30,
  },

  // Donation
  coinIconContainer: {
    position: 'absolute',
    bottom: 40,
    right: 20,
    padding: 10,
    borderRadius: 30,
    elevation: 5,
  },
  popupContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  popupContent: {
    backgroundColor: '#333',
    padding: 20,
    borderRadius: 10,
    alignItems: 'center',
  },
  paymentContent: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    width: '80%',
  },
  paymentInput: {
    backgroundColor: '#F5F5F5',
    borderRadius: 8,
    padding: 10,
    marginVertical: 5,
  },

  // Splash + Tab Bar
  splashText: {
    marginTop: 20,
    fontSize: 24,
    color: '#EF233C',
    fontWeight: 'bold',
  },
  bubbleTabBar: {
    flexDirection: 'row',
    marginHorizontal: 40,
    marginBottom: 20,
    paddingVertical: 10,
    borderRadius: 40,
    elevation: 10,
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    alignSelf: 'center',
    justifyContent: 'space-around',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
  },
  bubbleTabButton: {
    flex: 1,
    alignItems: 'center',
  },
  bubbleTabLabel: {
    fontSize: 12,
    marginTop: 2,
  },
});
